This is the Contents of the c file i used to run the code mentioned above.

#include <stdio.h>
int main() {
    printf("hello world");
    return 0;
}

I need help with a few things to be more specific:

modifications that needs to be enhnaced in def check_indentation() that needs to be added is:
- I need to add a check to Skip checking empty lines and user comments.
- if there is any line that starts with #include in .c file should start without spacing
- after all the #include or library lines are checked, the next line should also need not have any spacing before it. 
- Global variables which will be in the format: datatype + variable name and ths ends  with a semicolon (;)
- datatype + function name + (), it should be followed by {  on the same line after a space
- function definition should have the intendation of 4 spaces per line till } is encountered where it should be after the entire function definition and this should not have any spacing before the same.
- now within this function if there is any control structures in C or perl programming scripts like:

For c scripts:
    For Loop
    While Loop
    Do-While Loop
    If-Else Statement
    If-Else Ladder
    Relational Operators
For Perl scripts:
    For Loop
    Foreach Loop
    While Loop
    Do-While Loop
    If-Else Statement
    If-Elsif-Else Ladder
    Unless Statement
    Unless-Else Statement
    Unless-Elsif Statement

Please note that such examples need to be handled by the code: in the if-else and ladder or nested statements, we need to check indentation where for example:
if (test_expression1) {
    // Statements
} else {
    // Statements
}

in case of if- else if - else ladder scenario
if (test_expression1) {
    // Statements
} else if (test_expression2) {
    // Statements
} else if (test_expression3) {
    // Statements
} else {
    // Statements
}

in case of nested if-else:
if (condition1) {
    // Executes when condition1 is true
    if (condition2) {
        // Executes when condition2 is true
    } else {
        // Executes when condition2 is false
    }
} else {
    // Executes when condition1 is false
}


-------------------------------------------------------------------

#include <stdio.h>
int main() {
    printf("hello world");
    return 0;
}

There is no spaces before #include, but the error is thrown. 
Also int main is correctly spaced, since it is a function or a main function call. This should be the same with globally declared variables as well.
after int main, it is followed by () and a space and { after which the block of code starts on a new line with 4 space indent which is how it should be and the statements need to end with


It looks like the script is running successfully and performing the desired analysis. Here's a breakdown of the issues found:

Indentation issue at line 1: Incorrect indentation for #include.
Syntax issue at line 1: Incorrect syntax after #include.
Indentation issue at lines 2, 3, and 4: Incorrect indentation.
Consistency issue at line 5: Inconsistent line ending.
Whitespace issue at lines 3 and 4: Excessive whitespace within line.
The script successfully completed the analysis after identifying these issues.

The following edits to the code should be done so as to handle these additional requirements:
1. There should be no spaces in any line that contains the #include. This is specific to "c" file.
2. If there is a line that starts with the syntax: datatype+name+(), it should be followed by a space followed by "{" on the same line and nothing more should be on this line
3. The next line should have to start with 4 spaces and the code should be written based on all the requirements as present in code.
4. All lines under this line should have 4 spaces intendation present.
5. Please note that such examples need to be handled by the code: in the if-else and ladder or nested statements, we need to check indentation where for example:
if (test_expression1) {
    // Statements
} else {
    // Statements
}

in case of if- else if - else ladder scenario
if (test_expression1) {
    // Statements
} else if (test_expression2) {
    // Statements
} else if (test_expression3) {
    // Statements
} else {
    // Statements
}

in case of nested if-else:
if (condition1) {
    // Executes when condition1 is true
    if (condition2) {
        // Executes when condition2 is true
    } else {
        // Executes when condition2 is false
    }
} else {
    // Executes when condition1 is false
}


Lines reviewed:
int main() {
    printf("hello world");
    return 0;

This is corresponding to line 3 and 5 is has the correct syntax of 4 spaces and ends with ;

Indentation issue at line 2: Incorrect indentation.
Indentation issue at line 3: Incorrect indentation.
Indentation issue at line 4: Incorrect indentation.
Whitespace issue at line 3: Excessive whitespace within line.
Whitespace issue at line 4: Excessive whitespace within line.

    def check_indentation(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                inside_function = False
                indentation_level = 0

                for line_number, line in enumerate(lines, start=1):
                    # Skip empty lines and user comments
                    if not line.strip() or line.strip().startswith("//") or line.strip().startswith("/*"):
                        continue

                    # Check #include lines
                    if line.strip().startswith("#include"):
                        # Check for correct syntax after #include
                        if not re.match(r'^#include\s+<\w+\.h>\s*$', line.strip()):
                            print(f"Syntax issue at line {line_number}: Incorrect syntax after #include.")
                        continue  # Skip further checks for #include lines

                    # Check for global variables
                    if ";" in line and not inside_function:
                        if line.strip().endswith(";"):
                            print(f"Indentation issue at line {line_number}: Incorrect indentation for global variable declaration.")

                    # Check for function definitions
                    if "{" in line and "(" in line:
                        inside_function = True
                        if line.strip().endswith("{"):
                            indentation_level += 1

                    if inside_function:
                        # Check control structures indentation
                        control_structures = ["for", "while", "do", "if", "else", "elif", "elseif", "unless"]
                        for control_structure in control_structures:
                            if control_structure in line.strip():
                                if not line.strip().startswith(" " * 4 * (indentation_level + 1)):
                                    print(f"Indentation issue at line {line_number}: Incorrect indentation for {control_structure} statement.")
                        if "}" in line:
                            indentation_level -= 1
                            if indentation_level == 0:
                                inside_function = False
                                continue

                    # Check indentation of non-empty, non-comment lines
                    if not line.strip().startswith(" " * 4):
                        print(f"Indentation issue at line {line_number}: Incorrect indentation.")
                    
        except FileNotFoundError:
            print(f"File not found: {self.script_path}")
        except Exception as e:
            print(f"Error during indentation check: {str(e)}")


	def check_indentation(self):
		try:
			with open(self.script_path, "r") as script_file:
				lines = script_file.readlines()

				inside_function = False
				indentation_level = 0

				for line_number, line in enumerate(lines, start=1):
					# Skip empty lines and user comments
					if not line.strip() or line.strip().startswith("//") or line.strip().startswith("/*"):
						continue

					# Check #include lines
					if line.strip().startswith("#include"):
						# Check for correct syntax after #include
						if not re.match(r'^#include\s+<\w+\.h>\s*$', line.strip()):
							print(f"Syntax issue at line {line_number}: Incorrect syntax after #include.")
						continue  # Skip further checks for #include lines

					# Check for global variables
					if ";" in line and not inside_function:
						if line.strip().endswith(";"):
							print(f"Indentation issue at line {line_number}: Incorrect indentation for global variable declaration.")

					# Check for function definitions
					if "{" in line and "(" in line:
						inside_function = True
						if line.strip().endswith("{"):
							indentation_level += 1

					if inside_function:
						# Check control structures indentation
						control_structures = ["for", "while", "do", "if", "else", "elif", "elseif", "unless"]
						for control_structure in control_structures:
							if control_structure in line.strip():
								if not line.strip().startswith(" " * 4 * (indentation_level + 1)):
									print(f"Indentation issue at line {line_number}: Incorrect indentation for {control_structure} statement.")
						if "}" in line:
							indentation_level -= 1
							if indentation_level == 0:
								inside_function = False
								continue

					# Check indentation of non-empty, non-comment lines
					if not line.strip().startswith(" " * 4 * indentation_level):
						print(f"Indentation issue at line {line_number}: Incorrect indentation.")

		except FileNotFoundError:
			print(f"File not found: {self.script_path}")
		except Exception as e:
			print(f"Error during indentation check: {str(e)}")
			
			
---------------------------------------------------------------------------------------------------------------------------------------------

Additional Requirements:

This script works well. I have an additional requirement that i am trying to implement.
I am trying to create a log, basically a text file logging all details of the run. My intention is to write the output data into a text file and save it in the same location from where the original input script was read from in the beginning

Append the logs to an email.
			
---------------------------------------------------------------------------------------------------------------------------------------------

Allot Requirements:
All symbols should have a prefix which identifies their module.
Variables/functions start with lower-case.
Types/classes start with upper-case.
Constants are all upper-case.
Global variables start with 'g_'.
Members start with 'm_'
Pointers start with 'p'.

--
when a person says the requirement in the .cpp scripts is to have:
All the symbols should have a prefix which identifies their module.
What is a possible logic to have a check for this?

What is a module: Expected Formats in cpp and c files
export module ModuleName; - This declares and exports a module named ModuleName.
export declaration; - This exports a declaration (like a function, variable, or type) from the current module.
import ModuleName; - This imports a module named ModuleName into the current module or program.
module ModuleName:PartitionName; - This declares a module partition named PartitionName in the module ModuleName.
--
when a person says the requirement in the .cpp scripts is to have:
Variables/functions names start with lower-case.
What is a possible logic to have a check for this?


--
when a person says the requirement in the .cpp scripts is to have:
Types/classes start with upper-case.
What is a possible logic to have a check for this?
--
when a person says the requirement in the .cpp scripts is to have:
Constants are all upper-case.
What is a possible logic to have a check for this?
--
when a person says the requirement in the .cpp scripts is to have:
Global variables start with 'g_'.
What is a possible logic to have a check for this?
--
when a person says the requirement in the .cpp scripts is to have:
Members start with 'm_'
What is a possible logic to have a check for this?
--
when a person says the requirement in the .cpp scripts is to have:
Pointers start with 'p'.
What is a possible logic to have a check for this?


*****************************************************************************************************************************************
*****************************************************************************************************************************************
*****************************************************************************************************************************************

Present Code:

import re
import logging
from pathlib import Path
from datetime import datetime
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders

class ScriptAnalyzer:
    def __init__(self, script_path):
        self.script_path = Path(script_path)
        self.log_file = self.get_log_file_name()
        logging.basicConfig(filename=self.log_file, level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    def get_log_file_name(self):
        current_datetime = datetime.now().strftime("%H-%M-%S-on-%d-%m-%Y")
        log_folder = self.script_path.parent / "Logs"
        log_folder.mkdir(parents=True, exist_ok=True)  # Create Logs folder if it doesn't exist
        log_file_name = f"Logs-{self.script_path.stem}-at-{current_datetime}.log"
        return log_folder / log_file_name

    def run_analysis(self):
        try:
            # Check script indentation
            self.check_indentation()

            # Check naming conventions
            self.check_naming_conventions()

            # Check modularization
            self.check_modularization()

            # Check file encoding
            self.check_file_encoding()

            # Check consistency
            self.check_consistency()

            # Check code reuse
            self.check_code_reuse()

            # Check performance considerations
            self.check_performance()

            # Check whitespace usage
            self.check_whitespace()

            # Check memory leakages (for C scripts)
            if str(self.script_path).endswith(".c"):
                self.check_memory_leaks()
            elif str(self.script_path).endswith(".pl"):
                self.check_perl_specific_checks()
            
            # Print summary of the analysis results
            print("Script analysis completed successfully.")
            # Creating Log with Analysis in Log Directory    
            logging.info("Script analysis completed successfully.")
            
            # Email the log file
            sender_email = 'vaishnavi.m@thinkpalm.com'
            sender_password = 'Malu$123'
            recipient_email = 'manu.m@thinkpalm.com'
            attachment_path = self.log_file
            send_email(sender_email, sender_password, recipient_email, attachment_path)
            
        except Exception as e:
            logging.error(f"Error during analysis: {str(e)}")


    def check_indentation(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                inside_function = False
                indentation_level = 0

                for line_number, line in enumerate(lines, start=1):
                    # Skip empty lines and user comments
                    if not line.strip() or line.strip().startswith("//") or line.strip().startswith("/*"):
                        continue

                    # Check for TAB space usage
                    if "\t" in line:
                        logging.warning(f"Indentation issue at line {line_number}: TAB space used. Convert TABs to spaces.")

                    # Check #include lines
                    if line.strip().startswith("#include"):
                        # Check for correct syntax after #include
                        if not re.match(r'^#include\s+<\w+\.h>\s*$', line.strip()):
                            logging.warning(f"Syntax issue at line {line_number}: Incorrect syntax after #include.")
                        continue  # Skip further checks for #include lines

                    # Check for function definitions
                    if "{" in line and "(" in line and not inside_function:
                        if line.strip().endswith("{"):
                            inside_function = True
                            indentation_level += 1
                            continue  # Skip further checks for function definition lines

                    if inside_function:
                        # Check control structures indentation
                        control_structures = ["for", "while", "do", "if", "else", "elif", "elseif", "unless"]
                        for control_structure in control_structures:
                            if control_structure in line.strip():
                                if not line.startswith(" " * 4 * indentation_level):
                                    logging.warning(f"Indentation issue at line {line_number}: Incorrect indentation for {control_structure} statement.")
                                if line.strip().endswith("{"):
                                    indentation_level += 1
                            if "}" in line:
                                indentation_level -= 1
                                if indentation_level == 0:
                                    inside_function = False
                                    continue

                    # Check indentation of non-empty, non-comment lines
                    if not line.startswith(" " * 4 * indentation_level):
                        logging.warning(f"Indentation issue at line {line_number}: Incorrect indentation.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during indentation check: {str(e)}")


    def check_naming_conventions(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

            for line_number, line in enumerate(lines, start=1):
                # Remove leading/trailing whitespaces
                stripped_line = line.strip()

                # Check naming conventions based on file extension
                if str(self.script_path).endswith((".c", ".pl")):
                    self.check_common_naming_conventions(stripped_line, line_number)

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during naming conventions check: {str(e)}")


    def check_common_naming_conventions(self, line, line_number):
        # Implement common naming conventions checks
        # Example: Check if variable names follow a consistent pattern
        if str(self.script_path).endswith(".c"):
            # Check for C-specific naming conventions
            if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*$', line):
                logging.warning(f"Naming convention issue at line {line_number}: {line}")
        elif str(self.script_path).endswith(".pl"):
            # Check for Perl-specific naming conventions
            if re.match(r'^[a-zA-Z][a-zA-Z0-9]*$', line):
                logging.warning(f"Naming convention issue at line {line_number}: {line}")


    def check_modularization(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

            if str(self.script_path).endswith(".c"):
                num_functions = 0
                for line in lines:
                    # Exclude the main function from the count
                    if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*\s*\(\s*\)\s*\{', line) and "main" not in line:
                        num_functions += 1

                # if num_functions < 3:
                #     logging.warning(f"Modularization issue: The file {self.script_path} should have at least 3 functions.")

            elif str(self.script_path).endswith(".pl"):
                num_subroutines = 0
                for line in lines:
                    if re.match(r'^\s*sub\s', line):
                        num_subroutines += 1

                # if num_subroutines < 3:
                #     logging.warning(f"Modularization issue: The file {self.script_path} should have at least 3 subroutines.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during modularization check: {str(e)}")

                
    def check_file_encoding(self):
        try:
            with open(self.script_path, "rb") as script_file:
                script_file.read().decode('utf-8')
        except UnicodeDecodeError as e:
            logging.error(f"File encoding issue: {str(e)} at {self.script_path}")


    def check_consistency(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                # Check for consistent line endings (e.g., only '\n', '\r\n', or '\r')
                for line_number, line in enumerate(lines[:-1], start=1):
                    if not line.endswith(('\n', '\r\n', '\r')):
                        logging.warning(f"Consistency issue at line {line_number}: Inconsistent line ending.")

                # Check the last line for correct syntax
                last_line = lines[-1].strip()
                if last_line != "}":
                    logging.warning(f"Consistency issue: Incorrect syntax at the end of the file. Expected '}}', found '{last_line}'.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during consistency check: {str(e)}")


    def check_code_reuse(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                for line_number, line in enumerate(lines, start=1):
                    # Check for code reuse patterns
                    if re.match(r'^\s*(import|require)\s+', line):
                        logging.warning(f"Code reuse issue at line {line_number}: Possible code duplication.")
        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during code reuse check: {str(e)}")


    def check_performance(self):
        try:
            # Placeholder for performance checks
            pass
        except Exception as e:
            logging.error(f"Error during performance check: {str(e)}")


    def check_whitespace(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                for line_number, line in enumerate(lines, start=1):
                    # Check for excessive whitespace within lines
                    if not line.strip().startswith("#include"):
                        stripped_line = line.strip()  # strip leading and trailing spaces
                        if '  ' in stripped_line:  # check for two or more consecutive spaces
                            logging.warning(f"Whitespace issue at line {line_number}: Excessive whitespace within line.")
                        if line.rstrip('\n').endswith(' '):  # check if line ends with a space
                            logging.warning(f"Whitespace issue at line {line_number}: Line ends with a space.")
        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during whitespace check: {str(e)}")


    def check_memory_leaks(self):
        try:
            # Placeholder for memory leak checks
            pass
        except Exception as e:
            logging.error(f"Error during memory leak check: {str(e)}")


    def check_perl_specific_checks(self):
        try:
            # Placeholder for Perl-specific checks
            pass
        except Exception as e:
            logging.error(f"Error during Perl-specific check: {str(e)}")


def send_email(sender_email, sender_password, recipient_email, attachment_path):
    smtp_server = 'smtp-mail.outlook.com'
    smtp_port = 587

    # Create a multipart message
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email

    # Get the current date and format it as desired
    current_date = datetime.now().strftime('%Y-%m-%d')
    subject = f'Script Analyzer - {current_date}'  # Add current date to the subject
    message['Subject'] = subject

    # Add body text
    body = 'Please find the attached file.'
    message.attach(MIMEText(body, 'plain'))

    # Add attachment
    if attachment_path:
        attachment_filename = attachment_path.name
        attachment = open(attachment_path, "rb")
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(attachment.read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f"attachment; filename= {attachment_filename}")
        message.attach(part)
        attachment.close()  # Close the file after reading

    # Connect to the SMTP server and send the email
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipient_email, message.as_string())
        server.quit()
        print("Email sent successfully!")
        
    except smtplib.SMTPException as e:
        print(f"Failed to send email: {e}")
    except Exception as e:
        print(f"Unexpected error: {e}")

if __name__ == "__main__":
    script_path = input("Enter the Full Path to the Access the Script that needs to be Reviewed (Supports -> C (*.c) CPP (*.cpp) or Perl (*.pl or *.pm)): ")
    analyzer = ScriptAnalyzer(script_path)
    analyzer.run_analysis()
	
______________________________________________________________________________________________________________________________________________________________

The Code to work on:import re
import logging
import subprocess
import platform
import smtplib
from pathlib import Path
from datetime import datetime
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from pycparser import c_ast, parse_file

class ScriptAnalyzer:
    def __init__(self, script_path):
        self.script_path = Path(script_path)
        self.log_file = self.get_log_file_name()
        logging.basicConfig(filename=self.log_file, level=logging.INFO,
                            format='%(asctime)s - %(levelname)s - %(message)s')

    def get_log_file_name(self):
        current_datetime = datetime.now().strftime("%H-%M-%S-on-%d-%m-%Y")
        log_folder = self.script_path.parent / "Logs"
        log_folder.mkdir(parents=True, exist_ok=True)  # Create Logs folder if it doesn't exist
        log_file_name = f"Logs-{self.script_path.stem}-at-{current_datetime}.log"
        return log_folder / log_file_name

    def run_analysis(self):
        try:
            # Check script indentation
            self.check_indentation()

            # Check naming conventions
            self.check_naming_conventions()

            # Check modularization
            self.check_modularization()

            # Check file encoding
            self.check_file_encoding()

            # Check consistency
            self.check_consistency()

            # Check code reuse
            self.check_code_reuse()

            # Check performance considerations
            self.check_performance()

            # Check whitespace usage
            self.check_whitespace()

            # # Check memory leakages (for C scripts)
            # if str(self.script_path).endswith(".cpp"):
            #     self.check_memory_leaks()
            # elif str(self.script_path).endswith(".pl"):
            #     self.check_perl_specific_checks()
            
            # Print summary of the analysis results
            print("Script Analysis completed.")
            # Creating Log with Analysis in Log Directory    
            logging.info("Script Analysis completed.")
            
            # Email the log file
            sender_email = 'vaishnavi.m@thinkpalm.com'
            sender_password = 'Malu$123'
            recipient_email = 'manu.m@thinkpalm.com'
            attachment_path = self.log_file
            send_email(sender_email, sender_password, recipient_email, attachment_path)
            
        except Exception as e:
            logging.error(f"Error during analysis: {str(e)}")


    def check_indentation(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                inside_function = False
                indentation_level = 0

                for line_number, line in enumerate(lines, start=1):
                    # Skip empty lines and user comments
                    if not line.strip() or line.strip().startswith("//") or line.strip().startswith("/*"):
                        continue

                    # Check for TAB space usage
                    if "\t" in line:
                        logging.warning(f"Indentation issue at line {line_number}: TAB space used. Convert TABs to spaces.")

                    # Check #include lines
                    if line.strip().startswith("#include"):
                        # Check for correct syntax after #include
                        if not re.match(r'^#include\s+(<\w+\.h>|"\w+\.h")\s*$', line.strip()):
                            logging.warning(f"Syntax issue at line {line_number}: Incorrect syntax after #include.")
                        continue  # Skip further checks for #include lines

                    # Check for function definitions
                    if "{" in line and "(" in line and not inside_function:
                        if line.strip().endswith("{"):
                            inside_function = True
                            indentation_level += 1
                            continue  # Skip further checks for function definition lines

                    if inside_function:
                        # Check control structures indentation
                        control_structures = ["for", "while", "do", "if", "else", "elif", "elseif", "unless"]
                        for control_structure in control_structures:
                            if control_structure in line.strip():
                                if not line.startswith(" " * 4 * indentation_level):
                                    logging.warning(f"Indentation issue at line {line_number}: Incorrect indentation for {control_structure} statement.")
                                if line.strip().endswith("{"):
                                    indentation_level += 1
                            if "}" in line:
                                indentation_level -= 1
                                if indentation_level == 0:
                                    inside_function = False
                                    continue

                    # Check indentation of non-empty, non-comment lines
                    if not line.startswith(" " * 4 * indentation_level):
                        logging.warning(f"Indentation issue at line {line_number}: Incorrect indentation.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during indentation check: {str(e)}")


	def check_naming_conventions(self):
		try:
			# Load the C file
			ast = parse_file(str(self.script_path), use_cpp=True)
	
			# This is a visitor class that checks naming conventions
			class NamingConventionVisitor(c_ast.NodeVisitor):
				def __init__(self):
					self.module_prefix = None
	
				def visit_FileAST(self, node):
					if node.ext:
						for ext in node.ext:
							if isinstance(ext, c_ast.Decl):
								if ext.name and ext.name.startswith('MODULE_'):
									self.module_prefix = ext.name
					self.generic_visit(node)
	
				def visit_FuncDef(self, node):
					if not node.decl.name[0].islower():
						logging.warning(f"Function {node.decl.name} does not start with a lowercase letter")
					self.visit(node.body)
	
				def visit_Decl(self, node):
					if isinstance(node.type, c_ast.TypeDecl):
						if node.name.islower():
							logging.warning(f"Variable {node.name} does not start with an uppercase letter")
						elif node.name.upper() == node.name:
							logging.warning(f"Constant {node.name} should not be all uppercase")
						elif self.module_prefix and not node.name.startswith(self.module_prefix):
							logging.warning(f"Symbol {node.name} should have a prefix '{self.module_prefix}'")
					elif isinstance(node.type, c_ast.PtrDecl):
						if not node.name.startswith('p_'):
							logging.warning(f"Pointer variable {node.name} should start with 'p_'")
					elif isinstance(node.type, c_ast.Struct):
						if not node.name[0].isupper():
							logging.warning(f"Type/Class {node.name} does not start with an uppercase letter")
					self.generic_visit(node)
	
			# Visit each node in the AST
			v = NamingConventionVisitor()
			v.visit(ast)
	
		except FileNotFoundError:
			logging.error(f"File not found: {self.script_path}")
		except Exception as e:
			logging.error(f"Error during naming conventions check: {str(e)}")
	


    def check_modularization(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

            if str(self.script_path).endswith(".cpp"):
                num_functions = 0
                for line in lines:
                    # Exclude the main function from the count
                    if re.match(r'^[a-zA-Z_][a-zA-Z0-9_]*\s*\(\s*\)\s*\{', line) and "main" not in line:
                        num_functions += 1

                # if num_functions < 3:
                #     logging.warning(f"Modularization issue: The file {self.script_path} should have at least 3 functions.")

            elif str(self.script_path).endswith(".pl"):
                num_subroutines = 0
                for line in lines:
                    if re.match(r'^\s*sub\s', line):
                        num_subroutines += 1

                # if num_subroutines < 3:
                #     logging.warning(f"Modularization issue: The file {self.script_path} should have at least 3 subroutines.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during modularization check: {str(e)}")

                
    def check_file_encoding(self):
        try:
            with open(self.script_path, "rb") as script_file:
                script_file.read().decode('utf-8')
        except UnicodeDecodeError as e:
            logging.error(f"File encoding issue: {str(e)} at {self.script_path}")


    def check_consistency(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                # Check for consistent line endings (e.g., only '\n', '\r\n', or '\r')
                for line_number, line in enumerate(lines[:-1], start=1):
                    if not line.endswith(('\n', '\r\n', '\r')):
                        logging.warning(f"Consistency issue at line {line_number}: Inconsistent line ending.")

                # Check the last line for correct syntax
                last_line = lines[-1].strip()
                if last_line != "}":
                    logging.warning(f"Consistency issue: Incorrect syntax at the end of the file. Expected '}}', found '{last_line}'.")

        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during consistency check: {str(e)}")


    def check_code_reuse(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                for line_number, line in enumerate(lines, start=1):
                    # Check for code reuse patterns
                    if re.match(r'^\s*(import|require)\s+', line):
                        logging.warning(f"Code reuse issue at line {line_number}: Possible code duplication.")
        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during code reuse check: {str(e)}")


    def check_performance(self):
        try:
            # Placeholder for performance checks
            pass
        except Exception as e:
            logging.error(f"Error during performance check: {str(e)}")


    def check_whitespace(self):
        try:
            with open(self.script_path, "r") as script_file:
                lines = script_file.readlines()

                for line_number, line in enumerate(lines, start=1):
                    # Skip empty lines and user comments
                    if not line.strip() or line.strip().startswith("//") or line.strip().startswith("/*"):
                        continue

                    # Check for excessive whitespace within lines
                    stripped_line = line.strip()  # strip leading and trailing spaces
                    if '  ' in stripped_line:  # check for two or more consecutive spaces
                        logging.warning(f"Whitespace issue at line {line_number}: Excessive whitespace within line.")
                    if line.rstrip('\n').endswith(' '):  # check if line ends with a space
                        logging.warning(f"Whitespace issue at line {line_number}: Line ends with a space.")
        except FileNotFoundError:
            logging.error(f"File not found: {self.script_path}")
        except Exception as e:
            logging.error(f"Error during whitespace check: {str(e)}")


    def check_memory_leaks(self):
        try:
            cpp_file = str(self.script_path)
            executable_name = cpp_file.replace('.cpp', '.exe') if platform.system() == 'Windows' else cpp_file.replace('.cpp', '')

            if platform.system() == 'Windows':
                subprocess.check_call(['g++', cpp_file, '-o', executable_name])
                subprocess.check_call(['drmemory', '-logdir', 'logs', executable_name])
            else:
                subprocess.check_call(['g++', cpp_file, '-o', executable_name])
                valgrind_output = subprocess.check_output(['valgrind', '--leak-check=full', executable_name])
                if 'no leaks are possible' not in valgrind_output.decode('utf-8'):
                    logging.warning("Memory leak detected!")

        except subprocess.CalledProcessError as e:
            logging.error(f"Error running memory leak check: {e}")
        except FileNotFoundError:
            logging.error("Memory leak check tool not found. Please install the required tool.")
        except Exception as e:
            logging.error(f"Error checking memory leaks: {str(e)}")


    def check_perl_specific_checks(self):
        try:
            # Placeholder for Perl-specific checks
            pass
        except Exception as e:
            logging.error(f"Error during Perl-specific check: {str(e)}")


def send_email(sender_email, sender_password, recipient_email, attachment_path):
    smtp_server = 'smtp-mail.outlook.com'
    smtp_port = 587

    # Create a multipart message
    message = MIMEMultipart()
    message['From'] = sender_email
    message['To'] = recipient_email

    # Get the current date and format it as desired
    current_date = datetime.now().strftime('%Y-%m-%d')
    subject = f'Script Analyzer - {current_date}'  # Add current date to the subject
    message['Subject'] = subject

    # Add body text
    body = 'Please find the attached file.'
    message.attach(MIMEText(body, 'plain'))

    # Add attachment
    if attachment_path:
        attachment_filename = attachment_path.name
        attachment = open(attachment_path, "rb")
        part = MIMEBase('application', 'octet-stream')
        part.set_payload(attachment.read())
        encoders.encode_base64(part)
        part.add_header('Content-Disposition', f"attachment; filename= {attachment_filename}")
        message.attach(part)
        attachment.close()  # Close the file after reading

    # Connect to the SMTP server and send the email
    try:
        server = smtplib.SMTP(smtp_server, smtp_port)
        server.starttls()
        server.login(sender_email, sender_password)
        server.sendmail(sender_email, recipient_email, message.as_string())
        server.quit()
        print("Email sent successfully!")

    except (smtplib.SMTPException, IOError, OSError, Exception) as e:
        if isinstance(e, smtplib.SMTPException):
            print(f"Failed to send email: {e}")
        elif isinstance(e, IOError):
            print(f"I/O error occurred: {e}")
        elif isinstance(e, OSError):
            print(f"OS error occurred: {e}")
        else:
            print(f"Unexpected error: {e}")
        logging.error(f"Error occurred while sending email: {e}")


if __name__ == "__main__":
    script_path = input("Enter the Full Path to the Access the Script that needs to be Reviewed (Supports -> C (*.c) CPP (*.cpp) or Perl (*.pl or *.pm)): ")
    analyzer = ScriptAnalyzer(script_path)
    analyzer.run_analysis()


Additional Requirements:
have all the below requirements for verifications been addressed in the code mentioned??
The input C++ file must have
--> All symbols should have a prefix which identifies their module.
--> Variables/functions start with lower-case.
--> Types/classes start with upper-case.
--> Constants are all upper-case.
--> Global variables start with 'g_'.
--> Members start with 'm_'
--> All Pointer Variables start with 'p'.

Please let me know where and how this is implemented in the lines of code to handle these enhancements

