ScriptAnalyzer
Overview
ScriptAnalyzer is a Python class designed to analyze C/C++ scripts for various coding standards and best practices. It checks for issues such as indentation errors, naming convention violations, code modularization, file encoding, consistency, code reuse, whitespace usage, and memory leaks.

Dependencies
Python 3.x
pycparser (for parsing C scripts)
For memory leak checks:
Windows: Dr. Memory tool
Linux/Mac: Valgrind
Usage
Initialize the ScriptAnalyzer class with the path to the script you want to analyze.
Call the run_analysis() method to perform the analysis.
The analysis results will be logged in a file and emailed to the specified recipient.
Methods
run_analysis(): Performs the complete analysis of the script.
check_indentation(): Checks for indentation errors in the script.
check_naming_conventions(): Checks for naming convention violations in variables, functions, and types/classes.
check_modularization(): Checks if the script is adequately modularized with a minimum number of functions and subroutines.
check_file_encoding(): Checks the file encoding of the script (assumes UTF-8).
check_consistency(): Checks for consistency issues such as line endings and syntax at the end of the file.
check_code_reuse(): Checks for possible code duplication.
check_whitespace(): Checks for excessive whitespace within lines and at the end of lines.
check_memory_leaks(): Checks for memory leaks in the C++ script (requires external tools).
Configuration
Set global indentation spaces (INDENTATION_SPACES) and iteration values (ITERATION_VALUES) at the beginning of the code.
Logging
Logs are saved in the "Logs" folder with filenames formatted as <script_name>-at-<timestamp>.log.
Email Notification
Results are emailed to the specified recipient using the SMTP server smtp-mail.outlook.com and port 587.